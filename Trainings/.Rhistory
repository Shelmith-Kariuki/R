## Create a vector of packages that we will need
pkgs <- c("dplyr","purrr","repurrrsive")
## Check if there are variables you want to load, that are not already installed.
miss_pkgs <- pkgs[!pkgs %in% installed.packages()[,1]]
## Installing the missing packages
if(length(miss_pkgs)>0){
install.packages(miss_pkgs)
}
## Loading all the packages
invisible(lapply(pkgs,library,character.only=TRUE))
## Remove the objects that are no longer required
rm(miss_pkgs)
rm(pkgs)
set.seed(2020)
vec <- 1:5
Questions <- paste0("Opinion_",vec)
opinion_df <- data.frame(matrix("", ncol=5, nrow=200))
names(opinion_df) <- Questions
for(i in 1: length(Questions)){
opinion_df[,Questions[i]] <- sample(c("Strongly Agree", "Agree","Neutral","Disagree", "Strongly Disagree"),size = 200,replace = TRUE)
}
head(opinion_df, 10)
View(opinion_df)
unique(as.character(opinion_df$Opinion_1))
opinion_df <- opinion_df %>%
factor(Opinion_1,
levels = c("Strongly Disagree","Disagree","Neutral","Agree","Strongly Agree"),
labels = c("SD","D","N","A","SA"))
opinion_df <- opinion_df %>%
mutate(Opinion_1 =
factor(Opinion_1,
levels = c("Strongly Disagree","Disagree","Neutral","Agree","Strongly Agree"),
labels = c("SD","D","N","A","SA")))
levels(opinion_df$Opinion_1)
View(opinion_df)
## Create a vector of packages that we will need
pkgs <- c("dplyr","purrr","repurrrsive")
## Check if there are variables you want to load, that are not already installed.
miss_pkgs <- pkgs[!pkgs %in% installed.packages()[,1]]
## Installing the missing packages
if(length(miss_pkgs)>0){
install.packages(miss_pkgs)
}
## Loading all the packages
invisible(lapply(pkgs,library,character.only=TRUE))
## Remove the objects that are no longer required
rm(miss_pkgs)
rm(pkgs)
set.seed(2020)
vec <- 1:5
Questions <- paste0("Opinion_",vec)
opinion_df <- data.frame(matrix("", ncol=5, nrow=200))
names(opinion_df) <- Questions
for(i in 1: length(Questions)){
opinion_df[,Questions[i]] <- sample(c("Strongly Agree", "Agree","Neutral","Disagree", "Strongly Disagree"),size = 200,replace = TRUE)
}
head(opinion_df, 10)
opinion_df4 <- as.data.frame(lapply(opinion_df, function(x) factor(x,
levels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"),
labels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"))),check.names = FALSE)
levels(opinion_df3$Opinion_4)
levels(opinion_df4$Opinion_4)
levels(opinion_df4$Opinion_1)
levels(opinion_df4$Opinion_2)
levels(opinion_df4$Opinion_3
)
levels(opinion_df4$Opinion_4)
levels(opinion_df4$Opinion_5)
levels(opinion_df4$Opinion_6)
## Create a vector of packages that we will need
pkgs <- c("dplyr","purrr","repurrrsive")
## Check if there are variables you want to load, that are not already installed.
miss_pkgs <- pkgs[!pkgs %in% installed.packages()[,1]]
## Installing the missing packages
if(length(miss_pkgs)>0){
install.packages(miss_pkgs)
}
## Loading all the packages
invisible(lapply(pkgs,library,character.only=TRUE))
## Remove the objects that are no longer required
rm(miss_pkgs)
rm(pkgs)
set.seed(2020)
vec <- 1:5
Questions <- paste0("Opinion_",vec)
opinion_df <- data.frame(matrix("", ncol=5, nrow=200))
names(opinion_df) <- Questions
for(i in 1: length(Questions)){
opinion_df[,Questions[i]] <- sample(c("Strongly Agree", "Agree","Neutral","Disagree", "Strongly Disagree"),size = 200,replace = TRUE)
}
head(opinion_df, 10)
opinion_df2 <- opinion_df
## Opinion_1
# opinion_df2$Opinion_1 <- factor(opinion_df2$Opinion_1,
#           levels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"),
#           labels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"))
#
opinion_df <- opinion_df %>%
mutate(Opinion_1 =
factor(Opinion_1,
levels = c("Strongly Disagree","Disagree","Neutral","Agree","Strongly Agree"),
labels = c("Strongly Disagree","Disagree","Neutral","Agree","Strongly Agree")))
## Opinion_2
opinion_df2$Opinion_2 <- factor(opinion_df2$Opinion_2,
levels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"),
labels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"))
## Sorry, I cannot continue with this replication
opinion_df3 <- opinion_df
factor_function <- function(data,var){
data[,var] <- factor(data[,var],
levels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"),
labels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"))
return(data[,var])
}
for( i in 1:length(Questions)){
opinion_df3[,Questions[i]] <- factor_function(opinion_df3,Questions[i])
print(levels(opinion_df3[,Questions[i]]))
}
opinion_df <- data.frame(opinion_df)
opinion_df4 <- as.data.frame(lapply(opinion_df, function(x) factor(x,
levels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"),
labels = c("Strongly Disagree", "Disagree","Neutral","Agree", "Strongly Agree"))),check.names = FALSE)
levels(opinion_df4$Opinion_4)
levels(opinion_df4$Opinion_1)
levels(opinion_df4$Opinion_2)
levels(opinion_df4$Opinion_3)
levels(opinion_df4$Opinion_4)
levels(opinion_df4$Opinion_5)
levels(opinion_df$Opinion_1)
levels(opinion_df$Opinion_4)
library(forcats)
opinion_df5b <- opinion_df %>%
mutate(opinion_df4 = fct_relevel(Opinion_4,"Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree"))
levels(opinion_df$Opinion_4)
levels(opinion_df5b$Opinion_4)
opinion_df5b <- opinion_df %>%
mutate(Opinion_df4 = fct_relevel(Opinion_4,"Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree"))
levels(opinion_df5b$Opinion_4)
opinion_df5b <- opinion_df %>%
mutate(Opinion_4 = fct_relevel(Opinion_4,"Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree"))
levels(opinion_df5b$Opinion_4)
opinion_df5b <- opinion_df %>%
mutate(Opinion_5 = fct_relevel(Opinion_5, "Strongly Agree","Agree","Neutral","Disagree","Strongly Disagree"))
levels(opinion_df5b$Opinion_5)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,fig.width = 12)
## Install the libraries required
## create a vector of packages to be installed
pkgs <- c("tidyverse","data.table","DT","lubridate","ggthemes")
## Check if there are packages you want to load, that are not already installed.
miss_pkgs <- pkgs[!pkgs %in% installed.packages()[,1]]
## Installing the missing packages
if(length(miss_pkgs)>0){
install.packages(miss_pkgs)
}
## Loading all the packages
invisible(lapply(pkgs,library,character.only=TRUE))
## Remove the objects that are no longer required
rm(miss_pkgs)
rm(pkgs)
### Setting the plot theme
Company_XXX_theme<- theme_hc()+ theme(legend.position = "right",
legend.direction = "vertical",
#legend.title = element_blank(),
plot.title = element_text( size = rel(1.6), hjust = 0.5),
plot.subtitle = element_text(size = rel(1.5), hjust = 0.5),
#axis.text = element_text( size = rel(1.5)),
axis.text.x = element_text(size =rel(1.5),angle = 0),
axis.text.y = element_text(size =rel(1.5),angle = 0),
axis.title = element_text( size = rel(1.55)),
axis.line.x = element_line(size = 1.5, colour = "#c94a38"),
panel.background = element_rect(fill = NA))
### Colours that will be used for the plots
Company_XXX_blue = "#007faf"
Company_XXX_orange = "#c94a38"
Company_XXX_yellow = "#f48f00"
## Avoidance of scientific numbers
options(scipen = 999)
## Printing function
pr_func<-function(data,cnames){
datatable(data,colnames = cnames,
extensions = 'Buttons', options = list(
dom = 'Bfrtip',
buttons = c('copy', 'print')
)
)
}
## Read in the datasets
page_log <- read_csv("page_log.csv")
visit_caseStudy <- read_delim("visit_caseStudy.csv",";", escape_double = FALSE,
trim_ws = TRUE)
View(visit_caseStudy)
str(visit_caseStudy$date)
?POSIXct
install.packages("extrafont")
install.packages("ggtext")
extrafont::loadfonts()
install.packages("extrafontdb")
library(extrafontdb)
loadfonts()
library(extrafont)
loadfonts()
fonts()
fonttable()
library(extrafont)
library(extrafontdb)
fonts()
fonttable()
font_import()
fonts()
fonttable()
x <- fonttable()
View(x)
#fonts
windowsFonts(Jokerman = windowsFont('Jokerman'))
gdpr_violations <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_violations.tsv')
gdpr_text <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_text.tsv')
# Article Violated
gdpr_violations_1 <-
gdpr_violations %>%
mutate(article = str_extract_all(article_violated, "\\d{1,}[^(\\d{1,})]")) %>% #extract articles violated
unnest(cols = c(article)) %>%
mutate(article = str_squish(article),
article_n = as.numeric(article)) %>%
arrange(name, article_n)
library(tidyverse)
# Article Violated
gdpr_violations_1 <-
gdpr_violations %>%
mutate(article = str_extract_all(article_violated, "\\d{1,}[^(\\d{1,})]")) %>% #extract articles violated
unnest(cols = c(article)) %>%
mutate(article = str_squish(article),
article_n = as.numeric(article)) %>%
arrange(name, article_n)
# Fine by country
data_x <-
gdpr_violations_1 %>%
group_by(name) %>%
summarise(mean_country = mean(price))
plot <-
gdpr_violations_1 %>%
group_by(name, article, article_n) %>%
summarise(mean_price = mean(price), n = n()) %>%
left_join(data_x, by = 'name') %>%
ggplot() +
geom_point(aes(reorder(article, article_n), reorder(name, mean_country), fill = log10(mean_price), size = n),
shape = 21, alpha = 0.7, col = '#ffffff') +
scale_size_area("Number of\nArticles\nViolated", max_size = 16, breaks = c(1,5,10,20,30)) +
scale_fill_gradientn("Fine Price\n(million ???)", colours = c('#ffffff', '#FF0000'),
labels = c(0.001,0.01,0.1,1,10,100)) +
scale_color_gradientn(colours = c('#ffffff', '#FF0000')) +
labs(title = "<span style='color:#dddddd'> General Data Protection Regulation (GDPR) VIOLATIONS </span>",
x = "Violated Article #",
caption = "Github: @johnmutiso\nData: From Roel Hogervorst via Bob Rudis[twitter: @hrbrmstr]\nGraphic: 2020-week 17 TidyTuesday") +
theme_minimal() +
theme(plot.background = element_rect(fill = '#133337'),
axis.text = element_text(color = '#ddfff1', family = 'Gabriola', size = 16),
text = element_text(color = '#ddfff1', family = 'Gabriola', size = 16),
panel.grid = element_line(size = 0.002, color = '#065535'),
plot.title = element_markdown(size = 18, family = 'Jokerman'),
axis.title.y = element_blank(),
plot.caption = element_text(family = 'Papyrus', size = 10, colour = '#00ff7f'),
legend.text = element_text(size = 18))
plot <-
gdpr_violations_1 %>%
group_by(name, article, article_n) %>%
summarise(mean_price = mean(price), n = n()) %>%
left_join(data_x, by = 'name') %>%
ggplot() +
geom_point(aes(reorder(article, article_n), reorder(name, mean_country), fill = log10(mean_price), size = n),
shape = 21, alpha = 0.7, col = '#ffffff') +
scale_size_area("Number of\nArticles\nViolated", max_size = 16, breaks = c(1,5,10,20,30)) +
scale_fill_gradientn("Fine Price\n(million ???)", colours = c('#ffffff', '#FF0000'),
labels = c(0.001,0.01,0.1,1,10,100)) +
scale_color_gradientn(colours = c('#ffffff', '#FF0000')) +
labs(title = "<span style='color:#dddddd'> General Data Protection Regulation (GDPR) VIOLATIONS </span>",
x = "Violated Article #",
caption = "Github: @johnmutiso\nData: From Roel Hogervorst via Bob Rudis[twitter: @hrbrmstr]\nGraphic: 2020-week 17 TidyTuesday") +
theme_minimal() +
theme(plot.background = element_rect(fill = '#133337'),
axis.text = element_text(color = '#ddfff1', family = 'Gabriola', size = 16),
text = element_text(color = '#ddfff1', family = 'Gabriola', size = 16),
panel.grid = element_line(size = 0.002, color = '#065535'),
#plot.title = element_markdown(size = 18, family = 'Jokerman'),
axis.title.y = element_blank(),
plot.caption = element_text(family = 'Papyrus', size = 10, colour = '#00ff7f'),
legend.text = element_text(size = 18))
plot
# Fine by country
data_x <-
gdpr_violations_1 %>%
group_by(name) %>%
summarise(mean_country = mean(price))
# Article violated plot by country
plot <-
gdpr_violations_1 %>%
group_by(name, article, article_n) %>%
summarise(mean_price = mean(price), n = n()) %>%
left_join(data_x, by = 'name') %>%
ggplot() +
geom_point(aes(reorder(article, article_n), reorder(name, mean_country), fill = log10(mean_price), size = n),
shape = 21, alpha = 0.7, col = '#ffffff') +
scale_size_area("Number of\nArticles\nViolated", max_size = 16, breaks = c(1,5,10,20,30)) +
scale_fill_gradientn("Fine Price\n(million ???)", colours = c('#ffffff', '#FF0000'),
labels = c(0.001,0.01,0.1,1,10,100)) +
scale_color_gradientn(colours = c('#ffffff', '#FF0000')) +
labs(title = "<span style='color:#dddddd'> General Data Protection Regulation (GDPR) VIOLATIONS </span>",
x = "Violated Article #",
caption = "Github: @johnmutiso\nData: From Roel Hogervorst via Bob Rudis[twitter: @hrbrmstr]\nGraphic: 2020-week 17 TidyTuesday") +
theme_minimal() +
theme(plot.background = element_rect(fill = '#133337'),
axis.text = element_text(color = '#ddfff1', family = 'Dyuthi', size = 16),
text = element_text(color = '#ddfff1', family = 'Dyuthi', size = 16),
panel.grid = element_line(size = 0.002, color = '#065535'),
#plot.title = element_markdown(size = 18, family = 'Jokerman'),
axis.title.y = element_blank(),
plot.caption = element_text(family = 'Papyrus', size = 10, colour = '#00ff7f'),
legend.text = element_text(size = 18))
plot
plot <-
gdpr_violations_1 %>%
group_by(name, article, article_n) %>%
summarise(mean_price = mean(price), n = n()) %>%
left_join(data_x, by = 'name') %>%
ggplot() +
geom_point(aes(reorder(article, article_n), reorder(name, mean_country), fill = log10(mean_price), size = n),
shape = 21, alpha = 0.7, col = '#ffffff') +
scale_size_area("Number of\nArticles\nViolated", max_size = 16, breaks = c(1,5,10,20,30)) +
scale_fill_gradientn("Fine Price\n(million ???)", colours = c('#ffffff', '#FF0000'),
labels = c(0.001,0.01,0.1,1,10,100)) +
scale_color_gradientn(colours = c('#ffffff', '#FF0000')) +
labs(title = "<span style='color:#dddddd'> General Data Protection Regulation (GDPR) VIOLATIONS </span>",
x = "Violated Article #",
caption = "Github: @johnmutiso\nData: From Roel Hogervorst via Bob Rudis[twitter: @hrbrmstr]\nGraphic: 2020-week 17 TidyTuesday") +
theme_minimal() +
theme(plot.background = element_rect(fill = '#133337'),
axis.text = element_text(color = '#ddfff1', family = 'Gargi', size = 16),
text = element_text(color = '#ddfff1', family = 'Gargi', size = 16),
panel.grid = element_line(size = 0.002, color = '#065535'),
#plot.title = element_markdown(size = 18, family = 'Jokerman'),
axis.title.y = element_blank(),
plot.caption = element_text(family = 'Papyrus', size = 10, colour = '#00ff7f'),
legend.text = element_text(size = 18))
plot
plot <-
gdpr_violations_1 %>%
group_by(name, article, article_n) %>%
summarise(mean_price = mean(price), n = n()) %>%
left_join(data_x, by = 'name') %>%
ggplot() +
geom_point(aes(reorder(article, article_n), reorder(name, mean_country), fill = log10(mean_price), size = n),
shape = 21, alpha = 0.7, col = '#ffffff') +
scale_size_area("Number of\nArticles\nViolated", max_size = 16, breaks = c(1,5,10,20,30)) +
scale_fill_gradientn("Fine Price\n(million ???)", colours = c('#ffffff', '#FF0000'),
labels = c(0.001,0.01,0.1,1,10,100)) +
scale_color_gradientn(colours = c('#ffffff', '#FF0000')) +
labs(title = "<span style='color:#dddddd'> General Data Protection Regulation (GDPR) VIOLATIONS </span>",
x = "Violated Article #",
caption = "Github: @johnmutiso\nData: From Roel Hogervorst via Bob Rudis[twitter: @hrbrmstr]\nGraphic: 2020-week 17 TidyTuesday") +
theme_minimal() +
theme(plot.background = element_rect(fill = '#133337'),
axis.text = element_text(color = '#ddfff1', family = 'Gargi', face = "italic", size = 16),
text = element_text(color = '#ddfff1', family = 'Gargi', size = 16),
panel.grid = element_line(size = 0.002, color = '#065535'),
#plot.title = element_markdown(size = 18, family = 'Jokerman'),
axis.title.y = element_blank(),
plot.caption = element_text(family = 'Papyrus', size = 10, colour = '#00ff7f'),
legend.text = element_text(size = 18))
plot
plot <-
gdpr_violations_1 %>%
group_by(name, article, article_n) %>%
summarise(mean_price = mean(price), n = n()) %>%
left_join(data_x, by = 'name') %>%
ggplot() +
geom_point(aes(reorder(article, article_n), reorder(name, mean_country), fill = log10(mean_price), size = n),
shape = 21, alpha = 0.7, col = '#ffffff') +
scale_size_area("Number of\nArticles\nViolated", max_size = 16, breaks = c(1,5,10,20,30)) +
scale_fill_gradientn("Fine Price\n(million ???)", colours = c('#ffffff', '#FF0000'),
labels = c(0.001,0.01,0.1,1,10,100)) +
scale_color_gradientn(colours = c('#ffffff', '#FF0000')) +
labs(title = "<span style='color:#dddddd'> General Data Protection Regulation (GDPR) VIOLATIONS </span>",
x = "Violated Article #",
caption = "Github: @johnmutiso\nData: From Roel Hogervorst via Bob Rudis[twitter: @hrbrmstr]\nGraphic: 2020-week 17 TidyTuesday") +
theme_minimal() +
theme(plot.background = element_rect(fill = '#133337'),
axis.text = element_text(color = '#ddfff1', family = 'Lohit Telugu', face = "italic", size = 16),
text = element_text(color = '#ddfff1', family = 'Lohit Telugu', size = 16),
panel.grid = element_line(size = 0.002, color = '#065535'),
#plot.title = element_markdown(size = 18, family = 'Jokerman'),
axis.title.y = element_blank(),
plot.caption = element_text(family = 'Papyrus', size = 10, colour = '#00ff7f'),
legend.text = element_text(size = 18))
plot
library(ggtext)
install.packages("ggtext")
install.packages('ggtext',repos='http://cran.us.r-project.org')
plot <-
gdpr_violations_1 %>%
group_by(name, article, article_n) %>%
summarise(mean_price = mean(price), n = n()) %>%
left_join(data_x, by = 'name') %>%
ggplot() +
geom_point(aes(reorder(article, article_n), reorder(name, mean_country), fill = log10(mean_price), size = n),
shape = 21, alpha = 0.7, col = '#ffffff') +
scale_size_area("Number of\nArticles\nViolated", max_size = 16, breaks = c(1,5,10,20,30)) +
scale_fill_gradientn("Fine Price\n(million ???)", colours = c('#ffffff', '#FF0000'),
labels = c(0.001,0.01,0.1,1,10,100)) +
scale_color_gradientn(colours = c('#ffffff', '#FF0000')) +
labs(title = "<span style='color:#dddddd'> General Data Protection Regulation (GDPR) VIOLATIONS </span>",
x = "Violated Article #",
caption = "Github: @johnmutiso\nData: From Roel Hogervorst via Bob Rudis[twitter: @hrbrmstr]\nGraphic: 2020-week 17 TidyTuesday") +
theme_minimal() +
theme(plot.background = element_rect(fill = '#133337'),
axis.text = element_text(color = '#ddfff1', family = 'Lohit Telugu', face = "italic", size = 16),
text = element_text(color = 'red', family = 'Lohit Telugu', size = 16),
panel.grid = element_line(size = 0.002, color = '#065535'),
#plot.title = element_markdown(size = 18, family = 'Jokerman'),
axis.title.y = element_blank(),
plot.caption = element_text(family = 'Papyrus', size = 10, colour = '#00ff7f'),
legend.text = element_text(size = 18))
plot
library(extrafont)
windowsFonts(Jokerman = windowsFont('Jokerman'))
windowsFonts(Gabriola = windowsFont('Gabriola'))
windowsFonts(Papyrus = windowsFont('Papyrus'))
# data ---------------------------------------------------------------
gdpr_violations <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_violations.tsv')
gdpr_text <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_text.tsv')
# Article Violated
gdpr_violations_1 <-
gdpr_violations %>%
mutate(article = str_extract_all(article_violated, "\\d{1,}[^(\\d{1,})]")) %>% #extract articles violated
unnest(cols = c(article)) %>%
mutate(article = str_squish(article),
article_n = as.numeric(article)) %>%
arrange(name, article_n)
# Fine by country
data_x <-
gdpr_violations_1 %>%
group_by(name) %>%
summarise(mean_country = mean(price))
# Article violated plot by country
plot <-
gdpr_violations_1 %>%
group_by(name, article, article_n) %>%
summarise(mean_price = mean(price), n = n()) %>%
left_join(data_x, by = 'name') %>%
ggplot() +
geom_point(aes(reorder(article, article_n), reorder(name, mean_country), fill = log10(mean_price), size = n),
shape = 21, alpha = 0.7, col = '#ffffff') +
scale_size_area("Number of\nArticles\nViolated", max_size = 16, breaks = c(1,5,10,20,30)) +
scale_fill_gradientn("Fine Price\n(million ???)", colours = c('#ffffff', '#FF0000'),
labels = c(0.001,0.01,0.1,1,10,100)) +
scale_color_gradientn(colours = c('#ffffff', '#FF0000')) +
labs(title = "<span style='color:#dddddd'> General Data Protection Regulation (GDPR) VIOLATIONS </span>",
x = "Violated Article #",
caption = "Github: @johnmutiso\nData: From Roel Hogervorst via Bob Rudis[twitter: @hrbrmstr]\nGraphic: 2020-week 17 TidyTuesday") +
theme_minimal() +
theme(plot.background = element_rect(fill = '#133337'),
axis.text = element_text(color = '#ddfff1', family = 'Lohit Telugu', face = "italic", size = 16),
text = element_text(color = 'red', family = 'Lohit Telugu', size = 16),
panel.grid = element_line(size = 0.002, color = '#065535'),
#plot.title = element_markdown(size = 18, family = 'Jokerman'),
axis.title.y = element_blank(),
plot.caption = element_text(family = 'Lohit Telugu', size = 10, colour = '#00ff7f'),
legend.text = element_text(size = 18))
plot
# S
remotes::install_github("wilkelab/ggtext")
remotes::install_github("wilkelab/ggtext")
library(tidyverse)
library(ggtext)
library(extrafont)
detach("package:ggplot2", unload = TRUE)
